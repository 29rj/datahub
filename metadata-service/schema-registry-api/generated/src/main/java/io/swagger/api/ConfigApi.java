/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.33).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.datahubproject.schema_registry.openapi.generated.ConfigUpdateRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import java.io.IOException;
import java.util.Optional;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;


@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-13T18:00:00.821813Z[Europe/Lisbon]")
@Validated
public interface ConfigApi {

  Logger log = LoggerFactory.getLogger(ConfigApi.class);

  default Optional<ObjectMapper> getObjectMapper() {
    return Optional.empty();
  }

  default Optional<HttpServletRequest> getRequest() {
    return Optional.empty();
  }

  default Optional<String> getAcceptHeader() {
    return getRequest().map(r -> r.getHeader("Accept"));
  }

  @Operation(summary = "Deletes the specified subject-level compatibility level config and revert to the global default.", description = "", tags = {})
  @ApiResponses(value = {
      @ApiResponse(responseCode = "200", description = "", content = @Content(mediaType = "application/vnd.schemaregistry.v1+json", schema = @Schema(implementation = String.class))),

      @ApiResponse(responseCode = "404", description = "Error code 40401 -- Subject not found"),

      @ApiResponse(responseCode = "500", description = "Error code 50001 -- Error in the backend datastore")})
  @RequestMapping(value = "/config/{subject}", produces = {"application/vnd.schemaregistry.v1+json",
      "application/vnd.schemaregistry+json; qs=0.9", "application/json; qs=0.5"}, method = RequestMethod.DELETE)
  default ResponseEntity<String> deleteSubjectConfig(
      @Parameter(in = ParameterIn.PATH, description = "Name of the subject", required = true, schema = @Schema()) @PathVariable("subject") String subject) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
      if (getAcceptHeader().get().contains("application/json")) {
        try {
          return new ResponseEntity<>(getObjectMapper().get().readValue("\"NONE\"", String.class),
              HttpStatus.NOT_IMPLEMENTED);
        } catch (IOException e) {
          log.error("Couldn't serialize response for content type application/json", e);
          return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
      }
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default ConfigApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @Operation(summary = "Deletes the Global compatibility level config and revert to the global default.", description = "", tags = {})
  @ApiResponses(value = {@ApiResponse(responseCode = "200", description = "successful operation"),

      @ApiResponse(responseCode = "500", description = "Error code 50001 -- Error in the backend datastore")})
  @RequestMapping(value = "/config", method = RequestMethod.DELETE)
  default ResponseEntity<Void> deleteTopLevelConfig() {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default ConfigApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @Operation(summary = "Get compatibility level for a subject.", description = "", tags = {})
  @ApiResponses(value = {@ApiResponse(responseCode = "404", description = "Subject not found"),

      @ApiResponse(responseCode = "500", description = "Error code 50001 -- Error in the backend data store")})
  @RequestMapping(value = "/config/{subject}", method = RequestMethod.GET)
  default ResponseEntity<Void> getSubjectLevelConfig(
      @Parameter(in = ParameterIn.PATH, description = "Name of the subject", required = true, schema = @Schema()) @PathVariable("subject") String subject,
      @Parameter(in = ParameterIn.QUERY, description = "Whether to return the global compatibility level if subject compatibility level not found", schema = @Schema()) @Valid @RequestParam(value = "defaultToGlobal", required = false) Boolean defaultToGlobal) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default ConfigApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @Operation(summary = "Get global compatibility level.", description = "", tags = {})
  @ApiResponses(value = {
      @ApiResponse(responseCode = "500", description = "Error code 50001 -- Error in the backend data store")})
  @RequestMapping(value = "/config", method = RequestMethod.GET)
  default ResponseEntity<Void> getTopLevelConfig() {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default ConfigApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @Operation(summary = "Update compatibility level for the specified subject.", description = "", tags = {})
  @ApiResponses(value = {
      @ApiResponse(responseCode = "422", description = "Error code 42203 -- Invalid compatibility level Error code 40402 -- Version not found"),

      @ApiResponse(responseCode = "500", description = "Error code 50001 -- Error in the backend data store Error code 50003 -- Error while forwarding the request to the primary")})
  @RequestMapping(value = "/config/{subject}", consumes = {"application/vnd.schemaregistry.v1+json",
      "application/vnd.schemaregistry+json", "application/json",
      "application/octet-stream"}, method = RequestMethod.PUT)
  default ResponseEntity<Void> updateSubjectLevelConfig(
      @Parameter(in = ParameterIn.PATH, description = "Name of the subject", required = true, schema = @Schema()) @PathVariable("subject") String subject,
      @Parameter(in = ParameterIn.DEFAULT, description = "Config Update Request", required = true, schema = @Schema()) @Valid @RequestBody ConfigUpdateRequest body) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default ConfigApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @Operation(summary = "Update global compatibility level.", description = "", tags = {})
  @ApiResponses(value = {
      @ApiResponse(responseCode = "422", description = "Error code 42203 -- Invalid compatibility level"),

      @ApiResponse(responseCode = "500", description = "Error code 50001 -- Error in the backend data store Error code 50003 -- Error while forwarding the request to the primary ")})
  @RequestMapping(value = "/config", consumes = {"application/vnd.schemaregistry.v1+json",
      "application/vnd.schemaregistry+json", "application/json",
      "application/octet-stream"}, method = RequestMethod.PUT)
  default ResponseEntity<Void> updateTopLevelConfig(
      @Parameter(in = ParameterIn.DEFAULT, description = "Config Update Request", required = true, schema = @Schema()) @Valid @RequestBody ConfigUpdateRequest body) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default ConfigApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}

