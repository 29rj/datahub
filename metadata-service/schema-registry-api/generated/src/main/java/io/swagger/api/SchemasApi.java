/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.33).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import java.util.Optional;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;


@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-13T18:00:00.821813Z[Europe/Lisbon]")
@Validated
public interface SchemasApi {

  Logger log = LoggerFactory.getLogger(SchemasApi.class);

  default Optional<ObjectMapper> getObjectMapper() {
    return Optional.empty();
  }

  default Optional<HttpServletRequest> getRequest() {
    return Optional.empty();
  }

  default Optional<String> getAcceptHeader() {
    return getRequest().map(r -> r.getHeader("Accept"));
  }

  @Operation(summary = "Get the schema string identified by the input ID.", description = "", tags = {})
  @ApiResponses(value = {@ApiResponse(responseCode = "404", description = "Error code 40403 -- Schema not found "),

      @ApiResponse(responseCode = "500", description = "Error code 50001 -- Error in the backend data store ")})
  @RequestMapping(value = "/schemas/ids/{id}", method = RequestMethod.GET)
  default ResponseEntity<Void> getSchema(
      @Parameter(in = ParameterIn.PATH, description = "Globally unique identifier of the schema", required = true, schema = @Schema()) @PathVariable("id") Integer id,
      @Parameter(in = ParameterIn.QUERY, description = "Name of the subject", schema = @Schema()) @Valid @RequestParam(value = "subject", required = false) String subject,
      @Parameter(in = ParameterIn.QUERY, description = "Desired output format, dependent on schema type", schema = @Schema()) @Valid @RequestParam(value = "format", required = false) String format,
      @Parameter(in = ParameterIn.QUERY, description = "Whether to fetch the maximum schema identifier that exists", schema = @Schema(defaultValue = "false")) @Valid @RequestParam(value = "fetchMaxId", required = false, defaultValue = "false") Boolean fetchMaxId) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default SchemasApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @Operation(summary = "Get the schema types supported by this registry.", description = "", tags = {})
  @ApiResponses(value = {
      @ApiResponse(responseCode = "500", description = "Error code 50001 -- Error in the backend data store ")})
  @RequestMapping(value = "/schemas/types", method = RequestMethod.GET)
  default ResponseEntity<Void> getSchemaTypes() {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default SchemasApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @Operation(summary = "Get the schemas.", description = "", tags = {})
  @ApiResponses(value = {
      @ApiResponse(responseCode = "500", description = "Error code 50001 -- Error in the backend data store ")})
  @RequestMapping(value = "/schemas", method = RequestMethod.GET)
  default ResponseEntity<Void> getSchemas(
      @Parameter(in = ParameterIn.QUERY, description = "Filters results by the respective subject prefix", schema = @Schema()) @Valid @RequestParam(value = "subjectPrefix", required = false) String subjectPrefix,
      @Parameter(in = ParameterIn.QUERY, description = "Whether to return soft deleted schemas", schema = @Schema(defaultValue = "false")) @Valid @RequestParam(value = "deleted", required = false, defaultValue = "false") Boolean deleted,
      @Parameter(in = ParameterIn.QUERY, description = "Whether to return latest schema versions only for each matching subject", schema = @Schema(defaultValue = "false")) @Valid @RequestParam(value = "latestOnly", required = false, defaultValue = "false") Boolean latestOnly,
      @Parameter(in = ParameterIn.QUERY, description = "Pagination offset for results", schema = @Schema(defaultValue = "0")) @Valid @RequestParam(value = "offset", required = false, defaultValue = "0") Integer offset,
      @Parameter(in = ParameterIn.QUERY, description = "Pagination size for results. Ignored if negative", schema = @Schema(defaultValue = "-1")) @Valid @RequestParam(value = "limit", required = false, defaultValue = "-1") Integer limit) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default SchemasApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @Operation(summary = "Get all the subjects associated with the input ID.", description = "", tags = {})
  @ApiResponses(value = {@ApiResponse(responseCode = "404", description = "Error code 40403 -- Schema not found "),

      @ApiResponse(responseCode = "500", description = "Error code 50001 -- Error in the backend data store ")})
  @RequestMapping(value = "/schemas/ids/{id}/subjects", method = RequestMethod.GET)
  default ResponseEntity<Void> getSubjects(
      @Parameter(in = ParameterIn.PATH, description = "Globally unique identifier of the schema", required = true, schema = @Schema()) @PathVariable("id") Integer id,
      @Parameter(in = ParameterIn.QUERY, description = "Filters results by the respective subject", schema = @Schema()) @Valid @RequestParam(value = "subject", required = false) String subject,
      @Parameter(in = ParameterIn.QUERY, description = "Whether to include subjects where the schema was deleted", schema = @Schema()) @Valid @RequestParam(value = "deleted", required = false) Boolean deleted) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default SchemasApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }

  @Operation(summary = "Get all the subject-version pairs associated with the input ID.", description = "", tags = {})
  @ApiResponses(value = {@ApiResponse(responseCode = "404", description = "Error code 40403 -- Schema not found "),

      @ApiResponse(responseCode = "500", description = "Error code 50001 -- Error in the backend data store ")})
  @RequestMapping(value = "/schemas/ids/{id}/versions", method = RequestMethod.GET)
  default ResponseEntity<Void> getVersions(
      @Parameter(in = ParameterIn.PATH, description = "Globally unique identifier of the schema", required = true, schema = @Schema()) @PathVariable("id") Integer id,
      @Parameter(in = ParameterIn.QUERY, description = "Filters results by the respective subject", schema = @Schema()) @Valid @RequestParam(value = "subject", required = false) String subject,
      @Parameter(in = ParameterIn.QUERY, description = "Whether to include subject versions where the schema was deleted", schema = @Schema()) @Valid @RequestParam(value = "deleted", required = false) Boolean deleted) {
    if (getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
    } else {
      log.warn(
          "ObjectMapper or HttpServletRequest not configured in default SchemasApi interface so no example is generated");
    }
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}

